<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://disu-stat.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://disu-stat.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-02-03T05:24:13+00:00</updated><id>https://disu-stat.github.io/feed.xml</id><title type="html">blank</title><subtitle>Di SU&apos;s homepage. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Building an `R` Package and Integrate `C++`</title><link href="https://disu-stat.github.io/blog/2022/rcpp/" rel="alternate" type="text/html" title="Building an `R` Package and Integrate `C++`"/><published>2022-08-06T00:00:00+00:00</published><updated>2022-08-06T00:00:00+00:00</updated><id>https://disu-stat.github.io/blog/2022/rcpp</id><content type="html" xml:base="https://disu-stat.github.io/blog/2022/rcpp/"><![CDATA[<p>Welcome to my blog on the following topics: speeding up <code class="language-plaintext highlighter-rouge">R</code> codes using <code class="language-plaintext highlighter-rouge">C++</code>, building packages using <code class="language-plaintext highlighter-rouge">R</code> and <code class="language-plaintext highlighter-rouge">C++</code>, parallel computing with <code class="language-plaintext highlighter-rouge">R</code> and <code class="language-plaintext highlighter-rouge">C++</code>. These tools can help with simulations in daily research. There’re also some of my troubleshootings, which might help with future debug.</p> <h1 id="speed-up-r-codes-using-c">Speed up <code class="language-plaintext highlighter-rouge">R</code> codes using <code class="language-plaintext highlighter-rouge">C++</code></h1> <p>It is well-known that <code class="language-plaintext highlighter-rouge">R</code> is vectorized and slow in executing loops. To speed up the execution, <code class="language-plaintext highlighter-rouge">C++</code> can serve as a remedy. The <code class="language-plaintext highlighter-rouge">R</code> package <code class="language-plaintext highlighter-rouge">Rcpp</code> by Dirk Eddelbuettel et. al. provides nice integration of <code class="language-plaintext highlighter-rouge">R</code> and <code class="language-plaintext highlighter-rouge">C++</code>.</p> <ol> <li>Installation of Rcpp <ul> <li>(On windows) Install Rtools in a folder whose name <em>doesn’t contain spaces or tabs</em></li> <li>Install package Rcpp</li> </ul> </li> <li>Some Basic Syntax <ul> <li>Not reusable functions: Directly write <code class="language-plaintext highlighter-rouge">C++</code> functions in RStudio console using <code class="language-plaintext highlighter-rouge">cppFunction()</code>. E.g. <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  cppFunction("double foo(double x){return x+1.0;}",depends="RcppArmadillo")
</code></pre></div> </div> </li> <li>Reusable functions: Prepare a <code class="language-plaintext highlighter-rouge">C++</code> file <code class="language-plaintext highlighter-rouge">someFile.cpp</code>. Write functions in it. Directly source the file <code class="language-plaintext highlighter-rouge">someFile.cpp</code> in RStudio.</li> <li>In <code class="language-plaintext highlighter-rouge">C++</code> files, insert <code class="language-plaintext highlighter-rouge">// [[Rcpp::export]]</code> before the declaration of functions that you want to pass to <code class="language-plaintext highlighter-rouge">R</code>. Otherwise you cannot call it in <code class="language-plaintext highlighter-rouge">R</code>.</li> <li>Functions written in <code class="language-plaintext highlighter-rouge">someFile.cpp</code> is only usable in the current <code class="language-plaintext highlighter-rouge">R</code> session and cannot be saved. If a new <code class="language-plaintext highlighter-rouge">R</code> session is started, we need to source <code class="language-plaintext highlighter-rouge">someFile.cpp</code> again</li> <li>Reference: <a href="https://teuder.github.io/rcpp4everyone_en/210_rcpp_functions.html">Blog</a>, <a href="https://gallery.rcpp.org/">Gallery</a>, <a href="https://jywang2016.github.io/rcpp4everyone_cn/">中文参考</a></li> </ul> </li> <li>Another useful package: <code class="language-plaintext highlighter-rouge">RcppArmadillo</code>. It provides some <code class="language-plaintext highlighter-rouge">R</code>-like functions including sampling functions. Reference: <a href="http://arma.sourceforge.net/docs.html#top">click here</a></li> <li>One more useful package <code class="language-plaintext highlighter-rouge">RcppEigen</code>: <a href="https://cran.r-project.org/web/packages/RcppEigen/index.html">click here</a>.</li> <li>Yes another helpful package <code class="language-plaintext highlighter-rouge">RcppNumerical</code>: <a href="https://cran.r-project.org/web/packages/RcppNumerical/vignettes/introduction.html">see here</a></li> <li>Some special topics: <ul> <li>Passing a <code class="language-plaintext highlighter-rouge">C++</code> function as an argument into another <code class="language-plaintext highlighter-rouge">C++</code> function in Rcpp: <ul> <li>To do the “passing” in R console: The data type of the callee is <code class="language-plaintext highlighter-rouge">Rcpp::Function</code> or <code class="language-plaintext highlighter-rouge">SEXP</code>. And pass the output of this callee to <code class="language-plaintext highlighter-rouge">as&lt;double&gt;()</code> before passing it to any local variable. But you can only do the “passing” in R console rather than in the <code class="language-plaintext highlighter-rouge">C++</code> file. Possible to export the caller.</li> <li>To do the “passing” in <code class="language-plaintext highlighter-rouge">C++</code> file by other <code class="language-plaintext highlighter-rouge">C++</code> functions: the data type of this callee is a pointer. Need to declare a new type for the argument. Cannot export the caller.</li> <li>To do the “passing” in both: Seems not easy. By adding <code class="language-plaintext highlighter-rouge">//[[Rcpp::export]]</code> before the caller, the type is automatically <code class="language-plaintext highlighter-rouge">SEXP</code>. ad hoc Remedy: use a “wrapper” to perform the call in cpp and export the wrapper to R.</li> </ul> </li> </ul> </li> </ol> <h1 id="speeding-up-r-codes-other-methods">Speeding up <code class="language-plaintext highlighter-rouge">R</code> codes: other methods</h1> <p>Sometimes a simple improvement suffices.</p> <ol> <li>Parallel computing: with the help of the <a href="https://www.cuhk.edu.hk/itsc/hpc/getstart.html">cluster system</a> in CU, we can use around 30 cores for one task.</li> <li>Parallel computing &amp; <code class="language-plaintext highlighter-rouge">C++</code>: Notice that, <strong><code class="language-plaintext highlighter-rouge">C++</code> functions cannot be paralleled in <code class="language-plaintext highlighter-rouge">R</code> unless they are built into an <code class="language-plaintext highlighter-rouge">R</code> package</strong>. (Please refer to the next section)</li> <li>Some tricks: <br/> - <code class="language-plaintext highlighter-rouge">C++</code>: Use pointers properly <br/> - <code class="language-plaintext highlighter-rouge">C++</code>: Reduce the number of local variables (declaration and copying are slow in <code class="language-plaintext highlighter-rouge">C++</code>) <br/> - <code class="language-plaintext highlighter-rouge">C++</code>: Use pipe operator. For details, IDK… <br/> - <code class="language-plaintext highlighter-rouge">R</code>: Use the Forward-Pipe Operator <code class="language-plaintext highlighter-rouge">%&gt;%</code> from package <code class="language-plaintext highlighter-rouge">magrittr</code>. <br/> - <code class="language-plaintext highlighter-rouge">R</code>: Vectorize, use <code class="language-plaintext highlighter-rouge">apply</code>, etc.</li> </ol> <h1 id="building-packages-purely-by-r">Building packages purely by <code class="language-plaintext highlighter-rouge">R</code></h1> <p>To build an <code class="language-plaintext highlighter-rouge">R</code> package, just prepare all source codes and use the pane in RStudio. Reference: <a href="https://support.rstudio.com/hc/en-us/articles/200486488-Developing-Packages-with-the-RStudio-IDE#:~:text=R%20packages%20are%20an%20ideal,of%20build%20output%20and%20errors">click here</a></p> <h1 id="building-packages-by-r-and-c">Building packages by <code class="language-plaintext highlighter-rouge">R</code> and <code class="language-plaintext highlighter-rouge">C++</code></h1> <p>To make your codes distributable and parallelable, it would be a good choice to build a package for it. The following are steps for writing, building and updating a package.</p> <ol> <li>Write a package with <code class="language-plaintext highlighter-rouge">Rcpp</code> <br/> a. Write source <code class="language-plaintext highlighter-rouge">.cpp</code> codes <br/> b. Create a package skeleton: I prefer the following command <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  RcppArmadillo::RcppArmadillo.package.skeleton("yourPackageName")
</code></pre></div> </div> <p>One can also use</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Rcpp.package.skeleton("yourPackageName", cpp_files = c("convolve.cpp"),example=F)
</code></pre></div> </div> <p>A folder named <code class="language-plaintext highlighter-rouge">yourPackageName</code> will be created in the working directory. <br/> c. Copy all <code class="language-plaintext highlighter-rouge">.cpp</code> and <code class="language-plaintext highlighter-rouge">.R</code> source code files to <code class="language-plaintext highlighter-rouge">./src</code> folder directly.<br/> d. Some notes:</p> <ul> <li>The created package includes: <code class="language-plaintext highlighter-rouge">DESCRPTION</code> &amp; <code class="language-plaintext highlighter-rouge">man</code> folder,  <code class="language-plaintext highlighter-rouge">NAMESPACE</code>, <code class="language-plaintext highlighter-rouge">src</code> &amp; <code class="language-plaintext highlighter-rouge">R</code> folder (which include <code class="language-plaintext highlighter-rouge">RcppExport</code>). We only touch the <code class="language-plaintext highlighter-rouge">src</code> folder.</li> <li><code class="language-plaintext highlighter-rouge">RcppArmadillo</code> changes <code class="language-plaintext highlighter-rouge">C++</code> data type to R data type, automates <code class="language-plaintext highlighter-rouge">DESCRPTION</code> and <code class="language-plaintext highlighter-rouge">NAMESPACE</code> (<code class="language-plaintext highlighter-rouge">linkingTo</code> etc). If instead one uses <code class="language-plaintext highlighter-rouge">Rcpp.package.skeleton</code>, one still needs to modify <code class="language-plaintext highlighter-rouge">Depends/Imports</code> and <code class="language-plaintext highlighter-rouge">LinkingTo</code>, along with correct <code class="language-plaintext highlighter-rouge">NAMESPACE</code> file, <code class="language-plaintext highlighter-rouge">makevar</code> in description.</li> <li>Compared to <code class="language-plaintext highlighter-rouge">Rcpp</code>, <code class="language-plaintext highlighter-rouge">RcppArmadillo</code> will create additional <code class="language-plaintext highlighter-rouge">Makevars</code> and <code class="language-plaintext highlighter-rouge">Makevars.win</code> files in the <code class="language-plaintext highlighter-rouge">src</code> folder. No need to modify them.</li> <li>If the package is built using RStudio pane button, need to add <code class="language-plaintext highlighter-rouge">makevar</code> file in <code class="language-plaintext highlighter-rouge">./src</code> (or directly choose package type “with rcpparmadillo”), change the documentation <code class="language-plaintext highlighter-rouge">cppFileName.rd</code> in <code class="language-plaintext highlighter-rouge">./man</code>. It is really tedious.</li> </ul> </li> <li> <p>Build the package: execute the following commands in <code class="language-plaintext highlighter-rouge">R</code> console <br/> a. <code class="language-plaintext highlighter-rouge">compileAttributes()</code> (to modify the <code class="language-plaintext highlighter-rouge">RcppExports.R</code> file) <br/> b. <code class="language-plaintext highlighter-rouge">setwd('./yourPackageName')</code> <br/> c. <code class="language-plaintext highlighter-rouge">devtools::check()</code> (optional) <br/> d. <code class="language-plaintext highlighter-rouge">devtools::build()</code> (create a <code class="language-plaintext highlighter-rouge">someName.tar.gz</code> file, that is your package and you can upload it to the cluster or send it to others)</p> </li> <li>Use the package<br/> a. Install: there are many ways to install <ul> <li><code class="language-plaintext highlighter-rouge">install.packages('someName.tar.gz',repos=NULL,type='source')</code></li> <li><code class="language-plaintext highlighter-rouge">devtools::install('yourPackageName')</code></li> <li><code class="language-plaintext highlighter-rouge">setwd('./yourPackageName'); devtools::install()</code> <br/> b. Load: in R session, run <code class="language-plaintext highlighter-rouge">library('yourPackageName')</code></li> <li>Use <code class="language-plaintext highlighter-rouge">ls(package:yourPackageName)</code> to check what functions are loaded from the package</li> </ul> </li> <li>Update the package <br/> a. Modify codes in <code class="language-plaintext highlighter-rouge">./src</code> <br/> b. Repeat Step 2: Build the package and Step 3: Use the package</li> </ol> <h1 id="parallel-computing-with-r-and-c">Parallel computing with <code class="language-plaintext highlighter-rouge">R</code> and <code class="language-plaintext highlighter-rouge">C++</code></h1> <p>Recall that <code class="language-plaintext highlighter-rouge">C++</code> functions cannot be paralleled in <code class="language-plaintext highlighter-rouge">R</code> unless they are built into an <code class="language-plaintext highlighter-rouge">R</code> package. Moreover, once the package is ready, we must load it in the parallel computing function <code class="language-plaintext highlighter-rouge">foreach()</code>. For example,</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>foreach(iRep = 1:nRep, .combine = 'c', .packages = c('magrittr','yourPackageName')) %dopar% { someSimulation(iRep) }
</code></pre></div></div> <p>Otherwise there will be an error <code class="language-plaintext highlighter-rouge">Package not found</code>.</p> <h2 id="troubleshooting">Troubleshooting</h2> <ul> <li>Use <code class="language-plaintext highlighter-rouge">R3.6.0</code> for parallel computing with <code class="language-plaintext highlighter-rouge">C++</code></li> <li><code class="language-plaintext highlighter-rouge">install error: install.packages from source gives no functions while devtools::install from folder succeeds</code>: In Windows10, use <code class="language-plaintext highlighter-rouge">devtools::install('yourPackageName')</code> instead of from source using <code class="language-plaintext highlighter-rouge">someName.tar.gz</code></li> <li>According to my experience solely, if the package is to be installed into the cluster in CUHK, use the following command: <code class="language-plaintext highlighter-rouge">R CMD INSTALL 'someName.tar.gz' --no-lock</code> (directly type it in the console, no need to run <code class="language-plaintext highlighter-rouge">R</code>)</li> <li>Note 1: <code class="language-plaintext highlighter-rouge">not exit in scope</code> or <code class="language-plaintext highlighter-rouge">no matching function</code>: Check data types! It solves 95% of the problems.</li> <li>Note 2: <code class="language-plaintext highlighter-rouge">C++</code> checks typing when you source the file. Make sure data types are properly declared, functions are applied to variables with matching types (functions from different packages may have the same name, but accept different types of arguments), and arithmetic operators are applied to <code class="language-plaintext highlighter-rouge">double</code> (if you perform divison on <code class="language-plaintext highlighter-rouge">int</code>, the simulation results could be hugely different)</li> <li>Note 3: e.g., <code class="language-plaintext highlighter-rouge">std::max(a,b)</code> is different from <code class="language-plaintext highlighter-rouge">x.max()</code> where <code class="language-plaintext highlighter-rouge">x</code> is a of type <code class="language-plaintext highlighter-rouge">arma::mat</code>.</li> </ul> <h3 id="problems-to-be-solved">Problems to be solved</h3> <ul> <li>How to use <code class="language-plaintext highlighter-rouge">wrap()</code></li> </ul>]]></content><author><name></name></author><category term="coding"/><category term="rcpp"/><summary type="html"><![CDATA[Increading your `R` code speed]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://disu-stat.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://disu-stat.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://disu-stat.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>